# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-02-13 04:53
from __future__ import unicode_literals

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('regTime', models.DateTimeField(default=datetime.datetime(2018, 2, 13, 4, 53, 17, 325169, tzinfo=utc))),
                ('time', models.FloatField(default=7200.0)),
                ('score', models.IntegerField(default=0)),
                ('minesLeft', models.IntegerField(default=20)),
                ('phone', models.CharField(default='0000000000', max_length=10)),
                ('mines', models.CharField(default='192100191000129100111111012210000191001910000111123321111000199291191011232322112129921291013931239211019920921101233210110001992000000001392000', max_length=144)),
                ('fieldViewed', models.CharField(default='hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh', max_length=144)),
                ('puzzlePc', models.IntegerField(default=-1)),
                ('currentQs', models.IntegerField(default=-1)),
                ('quesTry', models.IntegerField(default=0)),
                ('TrialLeft', models.IntegerField(default=3)),
                ('Puzz', models.CharField(default='hhhhhhhhhhhh', max_length=12)),
                ('correctAns', models.CharField(default='00000000000000000000', max_length=20)),
                ('mineno', models.IntegerField(default=0)),
                ('qslist', models.CharField(default='000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', max_length=144)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idno', models.IntegerField(default=0)),
                ('ques', models.CharField(default='000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', max_length=144)),
                ('mines', models.CharField(default='192100191000129100111111012210000191001910000111123321111000199291191011232322112129921291013931239211019920921101233210110001992000000001392000', max_length=144)),
            ],
        ),
        migrations.CreateModel(
            name='PuzzlePc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idno', models.IntegerField(default=0)),
                ('pos', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionno', models.IntegerField()),
                ('solution', models.CharField(max_length=50)),
                ('question', models.CharField(default='', max_length=10000)),
                ('mineno', models.IntegerField(default=0)),
                ('idch', models.CharField(default='*', max_length=1)),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='puzzleRetrieved',
            field=models.ManyToManyField(to='main.PuzzlePc'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
